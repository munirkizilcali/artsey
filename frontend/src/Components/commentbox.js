import React, { Component } from "react";
import CommentList from "./commentlist";
import CommentForm from "./commentform";

// const url ="http://localhost:3000/api/v1/comments";
const pollInterval = 2000;

class CommentBox extends Component {
	constructor(props) {
		super(props);
	}

	loadCommentsFromServer() {
		// fetch(url)
		// .then(res => res.json())
		// .then(json => {
		// 	console.log(json)
		// 	this.setState({data: json})
		// });
	}

	handleCommentSubmit = comment => {
		var comments = this.state.data;
		// Optimistically set an id on the new comment. It will be replaced by an
		// id generated by the server. In a production application you would likely
		// not use Date.now() for this and would have a more robust system in place.
		comment.id = Date.now();
		var newComments = comments.concat([comment]);
		this.setState({ data: newComments });
		// fetch(url,{
		// method: 'POST',
		// headers: {
		//   'Accept': 'application/json',
		//   'Content-Type': 'application/json'
		// },
		// body: JSON.stringify({author: 1, text: "newComment"})
		// })
		//  .then(res => res.json())
		//  .then(json => console.log(json));
	};

	componentDidMount() {
		this.loadCommentsFromServer();
		setInterval(this.loadCommentsFromServer, pollInterval);
	}

	render() {
		return (
			<div className="commentBox">
				<CommentForm
					sendComment={this.props.sendComment}
					item={this.props.item}
				/>
				<hr />
				<CommentList
					item={this.props.item}
					comments={this.props.comments}
					deleteComment={this.props.deleteComment}
				/>
			</div>
		);
	}
}

export default CommentBox;
